# Generated by Django 5.1.1 on 2024-11-12 11:25

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('n_carte', models.CharField(blank=True, help_text='Numéro de carte unique pour chaque client.', max_length=100, null=True, unique=True)),
                ('nom', models.CharField(help_text='Nom de famille du client.', max_length=100)),
                ('prenom', models.CharField(help_text='Prénom du client.', max_length=100)),
                ('date_anniversaire', models.DateField(blank=True, help_text="Date d'anniversaire du client.", null=True)),
                ('email', models.EmailField(blank=True, help_text='Adresse email du client.', max_length=255, null=True)),
                ('numero_rue', models.CharField(blank=True, help_text='Numéro et nom de rue du client.', max_length=100, null=True)),
                ('code_postal', models.CharField(blank=True, help_text='Code postal du client.', max_length=10, null=True)),
                ('ville', models.CharField(blank=True, help_text='Ville du client.', max_length=100, null=True)),
                ('pays', models.CharField(blank=True, help_text='Pays du client.', max_length=100, null=True)),
                ('telephone', models.CharField(blank=True, help_text='Numéro de téléphone du client.', max_length=20, null=True)),
                ('credit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text="Crédit disponible pour le client après retour d'articles.", max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('fidelity_points', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Points de fidélité accumulés par le client.', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
            ],
            options={
                'verbose_name': 'Client',
                'verbose_name_plural': 'Clients',
                'ordering': ['nom', 'prenom'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_ean', models.CharField(blank=True, max_length=13, null=True, unique=True)),
                ('code_article', models.CharField(blank=True, max_length=100, null=True)),
                ('nom_article', models.CharField(max_length=255)),
                ('prix_vente', models.DecimalField(decimal_places=2, max_digits=10)),
                ('prix_achat', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('categorie', models.CharField(blank=True, max_length=100, null=True)),
                ('couleurs', models.CharField(blank=True, max_length=100, null=True)),
                ('tailles', models.CharField(blank=True, max_length=100, null=True)),
                ('quantite', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Produit',
                'verbose_name_plural': 'Produits',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('numero_transaction', models.CharField(blank=True, editable=False, max_length=20, null=True, unique=True)),
                ('total_price', models.DecimalField(decimal_places=2, help_text='Montant total de la transaction après réductions et applications des crédits/points.', max_digits=10)),
                ('total_reduction', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total des réductions appliquées.', max_digits=10)),
                ('total_items', models.PositiveIntegerField(default=0)),
                ('credit_applied', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Montant du crédit appliqué à cette transaction.', max_digits=10)),
                ('points_applied', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Montant des points de fidélité appliqués à cette transaction.', max_digits=10)),
                ('points_gagnes', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Points gagnés lors de cette transaction.', max_digits=10)),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('mode_paiement', models.CharField(choices=[('carte', 'Carte Bancaire'), ('cash', 'Espèces')], max_length=20)),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='divino_pos.client')),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
            },
        ),
        migrations.CreateModel(
            name='TransactionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('price', models.DecimalField(decimal_places=2, help_text="Prix unitaire de l'article.", max_digits=10)),
                ('reduction', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text="Réduction unitaire appliquée à l'article.", max_digits=10)),
                ('points_gagnes', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Points gagnés sur cet article.', max_digits=10)),
                ('returned_quantity', models.PositiveIntegerField(default=0, help_text='Quantité déjà retournée pour cet article.')),
                ('promotion_applied', models.BooleanField(default=False, help_text='Indique si une promotion a été appliquée sur cet article.')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='divino_pos.product')),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='divino_pos.transaction')),
            ],
            options={
                'verbose_name': 'Article de Transaction',
                'verbose_name_plural': 'Articles de Transaction',
            },
        ),
        migrations.CreateModel(
            name='Return',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_returned', models.PositiveIntegerField(default=1)),
                ('reason', models.TextField(blank=True, null=True)),
                ('date_returned', models.DateTimeField(auto_now_add=True)),
                ('refund_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Montant remboursé au client pour ce retour.', max_digits=10)),
                ('points_removed', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Points retirés lors du retour.', max_digits=10)),
                ('transaction_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='returns', to='divino_pos.transactionitem')),
            ],
            options={
                'verbose_name': 'Retour',
                'verbose_name_plural': 'Retours',
            },
        ),
        migrations.CreateModel(
            name='Voucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date_issued', models.DateTimeField(auto_now_add=True)),
                ('valid_until', models.DateTimeField(help_text="Date d'expiration du bon.")),
                ('code', models.CharField(help_text='Code unique du bon.', max_length=50, unique=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vouchers', to='divino_pos.client')),
            ],
            options={
                'verbose_name': "Bon d'Achat",
                'verbose_name_plural': "Bons d'Achat",
            },
        ),
    ]
